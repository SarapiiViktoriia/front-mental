declare namespace local {
  class Option {
    flags: string;
    required: boolean;
    optional: boolean;
    bool: boolean;
    short?: string;
    long: string;
    description: string;
    constructor(flags: string, description?: string);
  }
  class Command extends NodeJS.EventEmitter {
    [key: string]: any;
    args: string[];
    constructor(name?: string);
    version(str: string, flags?: string): Command;
    command(name: string, desc?: string, opts?: commander.CommandOptions): Command;
    arguments(desc: string): Command;
    parseExpectedArgs(args: string[]): Command;
    action(fn: (...args: any[]) => void): Command;
    option(flags: string, description?: string, fn?: ((arg1: any, arg2: any) => void) | RegExp, defaultValue?: any): Command;
    option(flags: string, description?: string, defaultValue?: any): Command;
    allowUnknownOption(arg?: boolean): Command;
    parse(argv: string[]): Command;
    parseOptions(argv: string[]): commander.ParseOptionsResult;
    opts(): { [key: string]: string };
    description(str: string): Command;
    description(): string;
    alias(alias: string): Command;
    alias(): string;
    usage(str: string): Command;
    usage(): string;
    name(str: string): Command;
    name(): string;
    outputHelp(cb?: (str: string) => string): void;
    help(cb?: (str: string) => string): void;
  }
}
declare namespace commander {
    type Command = local.Command
    type Option = local.Option
    interface CommandOptions {
        noHelp?: boolean;
        isDefault?: boolean;
    }
    interface ParseOptionsResult {
        args: string[];
        unknown: string[];
    }
    interface CommanderStatic extends Command {
        Command: typeof local.Command;
        Option: typeof local.Option;
        CommandOptions: CommandOptions;
        ParseOptionsResult: ParseOptionsResult;
    }
}
declare const commander: commander.CommanderStatic;
export = commander;
