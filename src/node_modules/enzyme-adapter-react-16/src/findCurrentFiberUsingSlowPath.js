function findCurrentFiberUsingSlowPath(fiber) {
  const { alternate } = fiber;
  if (!alternate) {
    return fiber;
  }
  let a = fiber;
  let b = alternate;
  while (true) { 
    const parentA = a.return;
    const parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      break;
    }
    if (parentA.child === parentB.child) {
      let { child } = parentA;
      while (child) {
        if (child === a) {
          return fiber;
        }
        if (child === b) {
          return alternate;
        }
        child = child.sibling;
      }
      throw new Error('Unable to find node on an unmounted component.');
    }
    if (a.return !== b.return) {
      a = parentA;
      b = parentB;
    } else {
      let didFindChild = false;
      let { child } = parentA;
      while (child) {
        if (child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        child = child.sibling;
      }
      if (!didFindChild) {
        ({ child } = parentB);
        while (child) {
          if (child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          child = child.sibling;
        }
        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug '
            + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }
  }
  if (a.stateNode.current === a) {
    return fiber;
  }
  return alternate;
}
module.exports = findCurrentFiberUsingSlowPath;
