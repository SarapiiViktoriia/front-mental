'use strict';
var Suite = require('../suite');
module.exports = function(suites, context, mocha) {
  return {
    runWithSuite: function runWithSuite(suite) {
      return function run() {
        suite.run();
      };
    },
    before: function(name, fn) {
      suites[0].beforeAll(name, fn);
    },
    after: function(name, fn) {
      suites[0].afterAll(name, fn);
    },
    beforeEach: function(name, fn) {
      suites[0].beforeEach(name, fn);
    },
    afterEach: function(name, fn) {
      suites[0].afterEach(name, fn);
    },
    suite: {
      only: function only(opts) {
        opts.isOnly = true;
        return this.create(opts);
      },
      skip: function skip(opts) {
        opts.pending = true;
        return this.create(opts);
      },
      create: function create(opts) {
        var suite = Suite.create(suites[0], opts.title);
        suite.pending = Boolean(opts.pending);
        suite.file = opts.file;
        suites.unshift(suite);
        if (opts.isOnly) {
          suite.parent._onlySuites = suite.parent._onlySuites.concat(suite);
        }
        if (typeof opts.fn === 'function') {
          opts.fn.call(suite);
          suites.shift();
        } else if (typeof opts.fn === 'undefined' && !suite.pending) {
          throw new Error(
            'Suite "' +
              suite.fullTitle() +
              '" was defined but no callback was supplied. Supply a callback or explicitly skip the suite.'
          );
        } else if (!opts.fn && suite.pending) {
          suites.shift();
        }
        return suite;
      }
    },
    test: {
      only: function(mocha, test) {
        test.parent._onlyTests = test.parent._onlyTests.concat(test);
        return test;
      },
      skip: function(title) {
        context.test(title);
      },
      retries: function(n) {
        context.retries(n);
      }
    }
  };
};
